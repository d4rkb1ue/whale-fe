{"version":3,"sources":["reducers/OfferReducer.js","reducers/index.js","actions/types.js","components/offer/Offer.js","api/get.js","components/offer/OfferList.js","actions/OfferActions.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","offerList","combineReducers","offer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","Offer","props","react_default","a","createElement","Table","Row","Cell","company_name","base_salary","equity","sign_bonus_string","yearly_bonus","data","_ref","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","axios","sent","offers","abrupt","stop","this","apply","OfferList","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getOffers","map","item","i","offer_Offer","key","Header","HeaderCell","Body","createTable","Component","connect","dispatch","response","_x","App","store","createStore","reducer","applyMiddleware","thunk","es","offer_OfferList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2afba16.chunk.js","sourcesContent":["import {\n    GET_OFFERS\n} from '../actions/types';\n\nconst INITIAL_STATE = { \n    offerList: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case GET_OFFERS: {\n            return {\n                ...state,\n                offerList: action.payload,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport OfferReducer from './OfferReducer';\n\nexport default combineReducers({\n    offer: OfferReducer\n});\n","// Offer\nexport const GET_OFFERS = 'get_offers';\n","import React from 'react';\nimport * as semantic from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst Offer = props => {\n    const offer = props.offer;\n    return (\n        <semantic.Table.Row>\n            <semantic.Table.Cell>{offer.company_name}</semantic.Table.Cell>\n            <semantic.Table.Cell>{offer.base_salary}</semantic.Table.Cell>\n            <semantic.Table.Cell>{offer.equity}</semantic.Table.Cell>\n            <semantic.Table.Cell>{offer.sign_bonus_string}</semantic.Table.Cell>\n            <semantic.Table.Cell>{offer.yearly_bonus}</semantic.Table.Cell>\n        </semantic.Table.Row>\n    );\n};\n\nexport default Offer;\n","// import demoData from './demo';\nimport * as axios from \"axios\";\n\nlet data = async () => {\n    let res = await axios.get(\"http://13.56.168.180/api/v1/offers?limit=10\");\n    let data = res.data && res.data.offers;\n    return data || [];\n};\n\nexport default data;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as semantic from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport Offer from './Offer';\nimport { getOffers } from '../../actions';\n\nclass OfferList extends Component {\n    constructor(props) {\n        super(props);\n        this.props.getOffers();\n    }\n\n    createTable(offers) {\n        return offers.map((item, i) => \n            <Offer\n                key={i}\n                offer={item}\n            />\n        )\n    }\n\n    render() {\n        return (\n            <semantic.Table>\n                <semantic.Table.Header>\n                    <semantic.Table.Row>\n                        <semantic.Table.HeaderCell>CompanyName</semantic.Table.HeaderCell>\n                        <semantic.Table.HeaderCell>Base</semantic.Table.HeaderCell>\n                        <semantic.Table.HeaderCell>Equity</semantic.Table.HeaderCell>\n                        <semantic.Table.HeaderCell>SignBonus</semantic.Table.HeaderCell>\n                        <semantic.Table.HeaderCell>YearlyBonus</semantic.Table.HeaderCell>\n                    </semantic.Table.Row>\n                </semantic.Table.Header>\n                <semantic.Table.Body>\n                    {this.createTable(this.props.offerList)}\n                </semantic.Table.Body>\n            </semantic.Table>\n        );\n    }\n}\n\nconst mapStateToProps = ({ offer }) => {\n    return {\n        offerList: offer.offerList\n    };\n};\n\n\nexport default connect(mapStateToProps, {\n    getOffers,\n})(OfferList);\n","import {\n    GET_OFFERS\n} from './types';\nimport data from '../api/get';\n\nexport const getOffers = () => async dispatch => {\n    const response = await data();\n    await dispatch({ type: GET_OFFERS, payload: response });\n};\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers';\nimport thunk from 'redux-thunk';\nimport './App.css';\nimport { OfferList } from './components/offer';\n\nclass App extends Component {\n\n    render() {\n        const store = createStore(reducer, applyMiddleware(thunk));\n        return (\n            <Provider store={store}>\n                <OfferList />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}