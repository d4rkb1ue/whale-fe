{"version":3,"sources":["constants/config.js","api/get.js","actions/OfferActions.js","constants/ApiActions.js","components/Table.js","containers/App.js","reducers/offers.js","reducers/index.js","serviceWorker.js","index.js"],"names":["OFFER_HEADER_CHOICES","season","key","value","text","OFFER_HEADER","Header","accessor","GENERAL_PARA","offset","limit","list_id","EMPTY_QUERY","NaN","annual_refresh","level","year","base_salary","relocation_fee","sign_bonus","post_title","satisfaction","area","degree","equity","equity_schedule","experience","experience_level","greencard","group","job_function","job_type","title","interest_point","other_offer","position_type","post_time","spider_time","promotion_package","url","yearly_bonus","apply_source","getData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","query","res","data","wrap","_context","prev","next","axios","get","API","sent","offers","abrupt","stop","this","_x","apply","arguments","loadingOffers","taskCount","type","getDemoOffers","dispatch","length","undefined","requestOffers","obj","console","error","Number","isNaN","substring","makeQuery","objectSpread","Table","renderCustomCell","headers","idx","findIndex","val","customURL","_this","Cell","u","react_default","createElement","Button","fluid","icon","size","onClick","window","open","maxWidth","customSeason","choice","month2season","find","s","filterMethod","filter","row","id","toLowerCase","String","indexOf","_this$props","props","loading","react_table_es","columns","isLoading","defaultPageSize","showPageSizeOptions","filterable","defaultFilterMethod","className","Component","App","Container","Table_Table","connect","state","_state$offers","INITIAL_STATE","combineReducers","action","Boolean","location","hostname","match","store","createStore","reducer","applyMiddleware","thunk","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72cce41f.chunk.js","sourcesContent":["export const API = 'http://whaleapi.drkbl.com/api/v1/'\nexport const OFFER_API = API + '/offers'\nexport const DEFAULT_OFFER_PAGESIZE = 20\nexport const OFFER_HEADER_CHOICES = {\n    'season': [\n        { key: '1-3', value: '1-3', text: 'Spring' },\n        { key: '4-6', value: '4-6', text: 'Summer' },\n        { key: '7-9', value: '7-9', text: 'Fall' },\n        { key: '10-12', value: '10-12', text: 'Winter' },\n    ]\n}\nexport const OFFER_HEADER = [\n    {\n        Header: 'CompanyName',\n        accessor: 'company_name',\n    },\n    {\n        Header: 'Base',\n        accessor: 'base_salary',\n    },\n    {\n        Header: 'Equity',\n        accessor: 'equity',\n    },\n    {\n        Header: 'SignBonus',\n        accessor: 'sign_bonus_string',\n    },\n    {\n        Header: 'YearlyBonus',\n        accessor: 'yearly_bonus',\n    },\n    {\n        Header: 'Degree',\n        accessor: 'degree',\n    },\n    {\n        Header: 'Area',\n        accessor: 'area',\n    },\n    {\n        Header: 'Experience',\n        accessor: 'experience_level',\n    },\n    // {\n    //     Header: 'experience',\n    //     accessor: 'experience',\n    // },\n    {\n        Header: 'post_time',\n        accessor: 'post_time',\n    },\n    {\n        Header: 'season mo.',\n        accessor: 'season',\n    },\n    {\n        Header: 'Link',\n        accessor: 'url',\n    },\n]\n\n\n","import axios from 'axios';\nimport { OFFER_API } from '../constants/config'\n\nconst GENERAL_PARA = {\n    offset: true,\n    limit: true,\n    list_id: true,\n}\n\nexport const EMPTY_QUERY = {\n    offset: NaN,\n    limit: NaN,\n    list_id: '',\n    annual_refresh: NaN,\n    level: NaN,\n    year: NaN,\n    base_salary: NaN,\n    relocation_fee: NaN,\n    sign_bonus: NaN,\n    post_title: '',\n    satisfaction: '',\n    area: '',\n    degree: '',\n    equity: '',\n    equity_schedule: '',\n    experience: '',\n    experience_level: '',\n    greencard: '',\n    group: '',\n    job_function: '',\n    job_type: '',\n    title: '',\n    interest_point: '',\n    other_offer: '',\n    position_type: '',\n    post_time: null,\n    spider_time: null,\n    promotion_package: '',\n    season: '',\n    url: '',\n    yearly_bonus: '',\n    apply_source: '',\n}\n\nexport const makeQuery = (obj) => {\n    if (!obj) { return '' }\n    let query = '?'\n    for (let key in obj) {\n        if (!(key in EMPTY_QUERY)) {\n            console.error('invalid arg', key)\n        }\n        if (Number.isNaN(obj[key]) || !obj[key]) {\n            continue\n        }\n        if (key in GENERAL_PARA) {\n            query += (key + '=' + obj[key])\n        } else {\n            query += ('by_' + key + '=' + obj[key])\n        }\n        query += '&'\n    }\n    if (query === '?') {\n        return ''\n    }\n\n    if (query[query.length - 1] === '&') {\n        query = query.substring(0, query.length - 1)\n    }\n    \n    return query\n}\n\n/**\n * usage:\n * makeQuery({\n *     ...EMPTY_QUERY,\n *     limit: 10,\n * })\n */\n\nexport const getData = async (query) => {\n    let res = await axios.get(OFFER_API + query)\n    let data = res.data && res.data.offers\n    return data || []\n}\n","import * as ApiActions from '../constants/ApiActions';\nimport { getData, makeQuery, EMPTY_QUERY } from '../api/get';\n\nexport const loadingOffers = (taskCount) => ({\n    type: ApiActions.LOADING_OFFERS,\n    taskCount\n})\n\nexport const receiveOffers = offers => ({\n    type: ApiActions.RECEIVE_OFFERS,\n    offers\n})\n\nconst requestOffers = (query = '', taskCount = 10) => async (dispatch) => {\n    dispatch(loadingOffers(taskCount))\n    const offers = await getData(query)\n    dispatch({\n        type: ApiActions.RECEIVE_OFFERS,\n        offers\n    })\n}\n\nconst DEMO_OFFER_COUNT = 3000\nexport const getDemoOffers = () => dispatch => {\n    return dispatch(requestOffers(makeQuery({\n        ...EMPTY_QUERY,\n        limit: DEMO_OFFER_COUNT,\n    }), DEMO_OFFER_COUNT))\n}\n","export const RECEIVE_OFFERS = 'recieve_offers'\nexport const LOADING_OFFERS = 'loading_offers'\n","import React, { Component } from 'react'\nimport ReactTable from \"react-table\"\nimport { Button, Dropdown } from 'semantic-ui-react'\nimport \"react-table/react-table.css\"\nimport { OFFER_HEADER_CHOICES, DEFAULT_OFFER_PAGESIZE } from '../constants/config'\n\nexport default class Table extends Component {\n    // use arrow function to avoid scope problem without useing .bind()\n    renderCustomCell = (headers, accessor, obj) => {\n        let idx = headers.findIndex(val => val.accessor === accessor)\n        headers[idx] = {\n            ...headers[idx],\n            ...obj\n        }\n    }\n\n    customURL = (headers) => {\n        // make url as button\n        const urlBotton = url => (\n            <Button\n                fluid\n                icon='world'\n                size='mini'\n                onClick={() => window.open(url, '_blank')} />\n        )\n        const URL_BUTTON_WIDTH = 50\n        this.renderCustomCell(headers, 'url', {\n            Cell: u => urlBotton(u.value),\n            maxWidth: URL_BUTTON_WIDTH\n        })\n    }\n\n    customSeason = (headers) => {\n        // translate month value '1-12' to spring/summer/fall/winter\n        const choice = OFFER_HEADER_CHOICES['season']\n        if (!choice) { return }\n        const month2season = (value) => {\n            if (!value) { return }\n            let res = choice.find(s => s.value === value)\n            return res && res.text\n        }\n        \n        const filterMethod = (filter, row) => {\n            const accessor = filter.id\n            if (!row[accessor]) {\n                return false\n            }\n            const value = filter.value.toLowerCase()\n            return String(month2season(row[accessor])).toLowerCase().indexOf(value) > -1\n        }\n        this.renderCustomCell(headers, 'season', {\n            Cell: ({ value }) => month2season(value),\n            filterMethod\n        })\n        \n        // TODO: use semantic-ui will get wrong z-index\n        // const selector = (onChange) => (\n        //     <Container fluid>\n        //         <Dropdown\n        //             placeholder='Season'\n        //             fluid\n        //             multiple\n        //             search\n        //             selection\n        //             options={choice}\n        //             onChange={event => onChange(event.target.value)} />\n        //     </Container>\n        // )\n        // const selector = (onChange) => (\n        //     <select\n        //         onChange={event => onChange(event.target.value)}\n        //         style={{ width: \"100%\" }}\n        //     >\n        //         <option value=\"all\">Show All</option>\n        //         <option value=\"true\">Can Drink</option>\n        //         <option value=\"false\">Can't Drink</option>\n        //     </select>\n        // )\n        // this.renderCustomCell(headers, 'season', 'Filter', ({ filter, onChange }) => selector(onChange))\n\n    }\n\n    render() {\n        const { offers, headers, loading } = this.props\n        this.customURL(headers)\n        this.customSeason(headers)\n        const defaultFilter = (filter, row) => {\n            const accessor = filter.id\n            if (!row[accessor]) {\n                return false\n            }\n            const value = filter.value.toLowerCase()\n            return String(row[accessor]).toLowerCase().indexOf(value) > -1\n        }\n\n        return (\n            <ReactTable\n                data={offers}\n                columns={headers}\n                loading={loading.isLoading}\n                defaultPageSize={DEFAULT_OFFER_PAGESIZE}\n                showPageSizeOptions={false}\n                filterable={true}\n                defaultFilterMethod={defaultFilter}\n                className=\"-striped -highlight\"\n            />\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { getDemoOffers } from '../actions'\nimport Table from '../components/Table'\nimport { OFFER_HEADER } from '../constants/config'\nimport { Container } from 'semantic-ui-react'\n\nclass App extends Component {\n    componentDidMount() {\n        const { dispatch } = this.props\n        dispatch(getDemoOffers())\n    }\n\n    render() {\n        const { offers, loading } = this.props\n        return (\n            <Container fluid>\n                <Table\n                    offers={offers}\n                    headers={OFFER_HEADER}\n                    loading={loading}\n                />\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const { offers, loading } = state.offers\n    return {\n        offers,\n        loading,\n    }\n}\n\nexport default connect(mapStateToProps)(App)\n","import * as Action from '../constants/ApiActions'\n\nconst INITIAL_STATE = { \n    offers: [],\n    loading: {\n        isLoading: false,\n        taskCount: 0,\n    },\n}\n\nexport default (state = INITIAL_STATE, action) => {\n    const { type } = action\n    switch (type) {\n        case Action.LOADING_OFFERS: {\n            return {\n                ...state,\n                loading: {\n                    isLoading: true,\n                    taskCount: action.taskCount\n                }\n            }\n        }\n        case Action.RECEIVE_OFFERS: {\n            return {\n                ...state,\n                offers: action.offers,\n                loading: {\n                    isLoading: false,\n                    taskCount: 0\n                }\n            }\n        }\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport offers from './offers'\n\nexport default combineReducers({\n    offers,\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport './index.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './containers/App'\nimport reducer from './reducers'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}